import Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenixWeb.Endpoint,
  cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenixWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [
#         port: 443,
#         cipher_suite: :strong,
#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
#         transport_options: [socket_opts: [:inet6]]
#       ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:

#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.

config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenix.Mailer,
  adapter: Bamboo.SendGridAdapter,
  api_key: {:system, "SENDGRID_API_KEY"},
  hackney_opts: [
    recv_timeout: :timer.minutes(1)
  ]

config :stream_closed_captioner_phoenix, twitch_extension_client: Twitch.Extension
config :stream_closed_captioner_phoenix, twitch_helix_client: Twitch.Helix
config :stream_closed_captioner_phoenix, azure_cognitive_client: Azure.Cognitive

config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenix.Repo,
  username: System.get_env("RDS_USERNAME"),
  password: System.get_env("RDS_PASSWORD"),
  database: System.get_env("RDS_DB_NAME"),
  hostname: System.get_env("RDS_HOSTNAME"),
  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10"),
  ssl: true,
  # The App was started from Rails which used the `schema_migrations` table with the same name but different schema
  # To continue with migrations from ecto from now on, we use choose a custom name for the ecto migrations
  # !!! From now on, migrations should only be done from Ecto !!!
  migration_source: "ecto_schema_migrations"

secret_key_base =
  System.get_env("SECRET_KEY_BASE") ||
    raise """
    environment variable SECRET_KEY_BASE is missing.
    You can generate one by calling: mix phx.gen.secret
    """

live_signing_salt =
  System.get_env("LIVE_SIGNING_SALT") ||
    raise """
    environment variable LIVE_SIGNING_SALT is missing.
    You can generate one by calling: mix phx.gen.secret 32
    """

config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenixWeb.Endpoint,
  # force_ssl: [rewrite_on: [:x_forwarded_proto]]
  server: true,
  http: [
    ip: {0, 0, 0, 0, 0, 0, 0, 0},
    port: String.to_integer(System.get_env("PORT") || "4000")
  ],
  # url: [host: System.get_env("HOST"), port: 443, scheme: "https"],
  url: [host: System.get_env("HOST")],
  secret_key_base: secret_key_base,
  live_view: [signing_salt: live_signing_salt]

config :ueberauth, Ueberauth.Strategy.Twitch.OAuth,
  client_id: System.get_env("TWITCH_CLIENT_ID"),
  client_secret: System.get_env("TWITCH_CLIENT_SECRET"),
  redirect_uri: System.get_env("TWITCH_REDIRECT_URI")

config :joken, default_signer: System.get_env("TWITCH_TOKEN_SECRET")

k8s_selector = System.get_env("LIBCLUSTER_KUBERNETES_SELECTOR")
k8s_name = System.get_env("LIBCLUSTER_KUBERNETES_NODE_BASENAME")

config :libcluster,
  topologies: [
    k8s_example: [
      strategy: Cluster.Strategy.Kubernetes,
      config: [
        kubernetes_selector: k8s_selector,
        kubernetes_node_basename: k8s_name
      ]
    ]
  ]

config :stream_closed_captioner_phoenix,
  api_key: System.get_env("NOTION_API_KEY"),
  notion_version: System.get_env("NOTION_VERSION")

guardian_secret_key = System.get_env("GUARDIAN_SECRET_KEY")

config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenix.Guardian,
  secret_key: guardian_secret_key

config :stream_closed_captioner_phoenix,
  eventsub_callback_url: System.get_env("EVENTSUB_CALLBACK_URL")

# ## Using releases (Elixir v1.9+)
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start each relevant endpoint:
#
config :stream_closed_captioner_phoenix, StreamClosedCaptionerPhoenixWeb.Endpoint, server: true
#
# Then you can assemble a release by calling `mix release`.
# See `mix help release` for more information.

# import_config "prod.secret.exs"
